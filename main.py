import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram import F
import asyncio
import openai

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ—à–∏–±–∫–∏)
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
if not BOT_TOKEN:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
if not OPENAI_API_KEY:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API OpenAI
openai.api_key = OPENAI_API_KEY

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties

BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –ù–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–ª—è aiogram 3.x
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=types.ParseMode.HTML)
)
dp = Dispatcher()

@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer(
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø AI-–∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä. –í–≤–µ–¥–∏ —Ç–µ–º—É, –∏ —è —Å–æ–∑–¥–∞–º –ø—Ä–æ–¥–∞—é—â–∏–π —Ç–µ–∫—Å—Ç.\n\n"
        "‚úçÔ∏è –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ: –ø–æ—Å—Ç, –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, —Å—Ç–æ—Ä–∏—Å –∏ —Ç.–¥."
    )

@dp.message(F.text)
async def generate_text(message: Message):
    user_input = message.text.strip()

    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç, –ø–æ–¥–æ–∂–¥–∏ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥...")

    try:
        completion = openai.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä, —Å–æ–∑–¥–∞–≤–∞–π —Ç–µ–∫—Å—Ç—ã –∂–∏–≤—ã–µ, –ø–æ–Ω—è—Ç–Ω—ã–µ –∏ –ø—Ä–æ–¥–∞—é—â–∏–µ."},
                {"role": "user", "content": user_input}
            ],
            temperature=0.9
        )

        reply = completion.choices[0].message.content
        await message.answer(reply)

    except Exception as e:
        logging.error(e)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")


