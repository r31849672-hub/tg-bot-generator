import os
import logging
import asyncio
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
import openai

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not BOT_TOKEN or not OPENAI_API_KEY:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã BOT_TOKEN –∏–ª–∏ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª–µ.")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

openai.api_key = OPENAI_API_KEY


@dp.message()
async def handle_message(message: types.Message):
    try:
        user_text = message.text

        # –ó–∞–ø—Ä–æ—Å –∫ OpenAI
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –ø–∏—Å–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –ø–æ—Å—Ç—ã –∏ —Ç–µ–∫—Å—Ç—ã –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π."},
                {"role": "user", "content": user_text},
            ],
        )

        reply_text = response.choices[0].message.content
        await message.answer(reply_text)

    except Exception as e:
        logging.error(e)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å API-–∫–ª—é—á –∏–ª–∏ —Ç–æ–∫–µ–Ω.")


async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
