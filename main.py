import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import Message
from openai import AsyncOpenAI

–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è



BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")




if not BOT_TOKEN:
raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
if not OPENAI_API_KEY:
raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤



bot = Bot(
token=BOT_TOKEN,
default=DefaultBotProperties(parse_mode=types.ParseMode.HTML)
)
dp = Dispatcher()
client = AsyncOpenAI(api_key=OPENAI_API_KEY)

–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start



@dp.message(Command("start"))
async def start_handler(message: Message):
await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π AI-–±–æ—Ç. –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å!")

–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π



@dp.message(F.text)
async def handle_message(message: Message):
user_text = message.text

try:
    response = await client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "–¢—ã —É–º–Ω—ã–π Telegram-–±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."},
            {"role": "user", "content": user_text},
        ],
    )

    bot_reply = response.choices[0].message.content
    await message.answer(bot_reply)

except Exception as e:
    await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫



async def main():
await dp.start_polling(bot)




if name == "main":
asyncio.run(main())


